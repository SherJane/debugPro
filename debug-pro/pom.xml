<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>jwc</groupId>
  <artifactId>debug-pro</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>debug-pro</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>1.8</java.version>
  </properties>

  <dependencies>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>5.0.6.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>org.projectlombok</groupId>
		<artifactId>lombok</artifactId>
		<scope>provided</scope>
		<version>1.18.4</version>
	</dependency>
	<!-- 记录log日志 logback-core并不需要显示导入 -->
	<dependency>
		<groupId>ch.qos.logback</groupId>
		<artifactId>logback-classic</artifactId>
		<version>1.2.3</version>
	</dependency>

	<!-- Spring MVC自动数据封装依赖的包 否则可能出现下面的错误，若使用@RequestBody的时候 -->
	<!-- Content type 'application/json' not supported 当然还有其余配置,原理了解 -->
	<!-- 此处需要导入databind包即可， jackson-annotations、jackson-core都不需要显示自己的导入了 -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.9.8</version>
	</dependency>
	
	<!-- 
	<dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-all</artifactId>
      <version>4.1.65.Final</version>
    </dependency>
     -->
    
    <!-- aspectj -->
    <dependency>
        <groupId>org.aspectj</groupId>
        <artifactId>aspectjrt</artifactId>
        <version>1.9.6</version>
      </dependency>
      <dependency>
        <groupId>org.aspectj</groupId>
        <artifactId>aspectjtools</artifactId>
        <version>1.9.6</version>
      </dependency>
       
	<dependency>
	  <groupId>commons-httpclient</groupId>
	  <artifactId>commons-httpclient</artifactId>
	  <version>3.1</version>
    </dependency>
	<dependency>
	  <groupId>org.apache.httpcomponents</groupId>
	  <artifactId>httpmime</artifactId>
	  <version>4.5.2</version>
	</dependency>
		
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-test</artifactId>
		<version>4.3.7.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
		<scope>test</scope>
	</dependency>
  </dependencies>
  
  <build>
    <plugins>
	    <plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-compiler-plugin</artifactId>
		    <version>3.1</version>
		    <configuration>
			    <source>1.8</source>
			    <target>1.8</target>
		    </configuration>
	    </plugin>
	    
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.6</version>
            <configuration>
                <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
        </plugin>
    </plugins>
    
    <!--
     directory：属性指定资源文件放置的目录。
     includes：包含哪些配置文件（.class文件不用写）
     filtering：如果设置为false的话，则表示上文的filters配置失效；如果设置为true，则会根据${env}.properties里面的键值对来
          填充includes指定文件里的${xxxx}占位符（若不做环境区分，一般就是false即可）
    -->
	<resources>
		<resource>
			<directory>src/main/java</directory>
			<includes>
				<include>**/*.properties</include>
				<include>**/*.xml</include>
				<include>**/*.tld</include>
			</includes>
			<filtering>false</filtering>
		</resource>
	</resources>
  </build>
</project>
